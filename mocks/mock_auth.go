// Code generated by MockGen. DO NOT EDIT.
// Source: github.optum.com/healthcarecloud/terrascale/pkg/auth (interfaces: Authenticator)

// Package mocks is a generated GoMock package.
package mocks

import (
	credentials "github.com/aws/aws-sdk-go/aws/credentials"
	session "github.com/aws/aws-sdk-go/aws/session"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// GetAWSMasterCreds mocks base method
func (m *MockAuthenticator) GetAWSMasterCreds(arg0 *logrus.Entry, arg1, arg2 string) (*credentials.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSMasterCreds", arg0, arg1, arg2)
	ret0, _ := ret[0].(*credentials.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSMasterCreds indicates an expected call of GetAWSMasterCreds
func (mr *MockAuthenticatorMockRecorder) GetAWSMasterCreds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSMasterCreds", reflect.TypeOf((*MockAuthenticator)(nil).GetAWSMasterCreds), arg0, arg1, arg2)
}

// GetCredentialEnvVarsForAccount mocks base method
func (m *MockAuthenticator) GetCredentialEnvVarsForAccount(arg0 *logrus.Entry, arg1, arg2, arg3 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialEnvVarsForAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialEnvVarsForAccount indicates an expected call of GetCredentialEnvVarsForAccount
func (mr *MockAuthenticatorMockRecorder) GetCredentialEnvVarsForAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialEnvVarsForAccount", reflect.TypeOf((*MockAuthenticator)(nil).GetCredentialEnvVarsForAccount), arg0, arg1, arg2, arg3)
}

// GetPlatformParametersSession mocks base method
func (m *MockAuthenticator) GetPlatformParametersSession(arg0 *logrus.Entry) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformParametersSession", arg0)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformParametersSession indicates an expected call of GetPlatformParametersSession
func (mr *MockAuthenticatorMockRecorder) GetPlatformParametersSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformParametersSession", reflect.TypeOf((*MockAuthenticator)(nil).GetPlatformParametersSession), arg0)
}

// GetPlatformSession mocks base method
func (m *MockAuthenticator) GetPlatformSession() *session.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformSession")
	ret0, _ := ret[0].(*session.Session)
	return ret0
}

// GetPlatformSession indicates an expected call of GetPlatformSession
func (mr *MockAuthenticatorMockRecorder) GetPlatformSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformSession", reflect.TypeOf((*MockAuthenticator)(nil).GetPlatformSession))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.optum.com/healthcarecloud/terrascale/pkg/steps (interfaces: StepperFactory,Stepper)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	steps "github.optum.com/healthcarecloud/terrascale/pkg/steps"
	reflect "reflect"
)

// MockStepperFactory is a mock of StepperFactory interface
type MockStepperFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStepperFactoryMockRecorder
}

// MockStepperFactoryMockRecorder is the mock recorder for MockStepperFactory
type MockStepperFactoryMockRecorder struct {
	mock *MockStepperFactory
}

// NewMockStepperFactory creates a new mock instance
func NewMockStepperFactory(ctrl *gomock.Controller) *MockStepperFactory {
	mock := &MockStepperFactory{ctrl: ctrl}
	mock.recorder = &MockStepperFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepperFactory) EXPECT() *MockStepperFactoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStepperFactory) Get(arg0 steps.Step) steps.Stepper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(steps.Stepper)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockStepperFactoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStepperFactory)(nil).Get), arg0)
}

// MockStepper is a mock of Stepper interface
type MockStepper struct {
	ctrl     *gomock.Controller
	recorder *MockStepperMockRecorder
}

// MockStepperMockRecorder is the mock recorder for MockStepper
type MockStepperMockRecorder struct {
	mock *MockStepper
}

// NewMockStepper creates a new mock instance
func NewMockStepper(ctrl *gomock.Controller) *MockStepper {
	mock := &MockStepper{ctrl: ctrl}
	mock.recorder = &MockStepperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStepper) EXPECT() *MockStepperMockRecorder {
	return m.recorder
}

// ExecuteStep mocks base method
func (m *MockStepper) ExecuteStep(arg0 steps.ExecutionConfig) steps.StepOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStep", arg0)
	ret0, _ := ret[0].(steps.StepOutput)
	return ret0
}

// ExecuteStep indicates an expected call of ExecuteStep
func (mr *MockStepperMockRecorder) ExecuteStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStep", reflect.TypeOf((*MockStepper)(nil).ExecuteStep), arg0)
}

// ExecuteStepDestroy mocks base method
func (m *MockStepper) ExecuteStepDestroy(arg0 steps.ExecutionConfig) steps.StepOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStepDestroy", arg0)
	ret0, _ := ret[0].(steps.StepOutput)
	return ret0
}

// ExecuteStepDestroy indicates an expected call of ExecuteStepDestroy
func (mr *MockStepperMockRecorder) ExecuteStepDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStepDestroy", reflect.TypeOf((*MockStepper)(nil).ExecuteStepDestroy), arg0)
}

// ExecuteStepTests mocks base method
func (m *MockStepper) ExecuteStepTests(arg0 steps.ExecutionConfig) steps.StepTestOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStepTests", arg0)
	ret0, _ := ret[0].(steps.StepTestOutput)
	return ret0
}

// ExecuteStepTests indicates an expected call of ExecuteStepTests
func (mr *MockStepperMockRecorder) ExecuteStepTests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStepTests", reflect.TypeOf((*MockStepper)(nil).ExecuteStepTests), arg0)
}
